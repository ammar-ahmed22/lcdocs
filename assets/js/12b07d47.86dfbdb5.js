"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[194],{9028:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>c,toc:()=>t});var s=l(4848),i=l(8453);const r={sidebar_position:4},o="Valid Sudoku",c={id:"medium/valid_sudoku",title:"Valid Sudoku",description:"Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:",source:"@site/docs/medium/valid_sudoku.md",sourceDirName:"medium",slug:"/medium/valid_sudoku",permalink:"/lcdocs/medium/valid_sudoku",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"notesSidebar",previous:{title:"Product of Array Except Self",permalink:"/lcdocs/medium/product_of_array_except_self"}},d={},t=[{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Notes",id:"notes",level:2},{value:"Conceptual Idea",id:"conceptual-idea",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Time",id:"time",level:4},{value:"Space",id:"space",level:4},{value:"Solution",id:"solution",level:2},{value:"Rust",id:"rust",level:3}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"valid-sudoku",children:"Valid Sudoku"}),"\n",(0,s.jsxs)(n.p,{children:["Determine if a ",(0,s.jsx)(n.code,{children:"9 x 9"})," Sudoku board is valid. Only the filled cells need to be validated ",(0,s.jsx)(n.strong,{children:"according to the following rules"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Each row must contain the digits ",(0,s.jsx)(n.code,{children:"1-9"})," without repetition."]}),"\n",(0,s.jsxs)(n.li,{children:["Each column must contain the digits ",(0,s.jsx)(n.code,{children:"1-9"})," without repetition."]}),"\n",(0,s.jsxs)(n.li,{children:["Each of the nine 3 x 3 sub-boxes of the grid must contain the digits ",(0,s.jsx)(n.code,{children:"1-9"})," without repetition."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A Sudoku board (partially filled) could be valid but is not necessarily solvable."}),"\n",(0,s.jsx)(n.li,{children:"Only the filled cells need to be validated according to the mentioned rules."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Input: board ="})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' [["5","3",".",".","7",".",".",".","."]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,["6",".",".","1","9","5",".",".","."]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,[".","9","8",".",".",".",".","6","."]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,["8",".",".",".","6",".",".",".","3"]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,["4",".",".","8",".","3",".",".","1"]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,["7",".",".",".","2",".",".",".","6"]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,[".","6",".",".",".",".","2","8","."]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,[".",".",".","4","1","9",".",".","5"]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,[".",".",".",".","8",".",".","7","9"]]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:"Output: true"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Input: board ="})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' [["8","3",".",".","7",".",".",".","."]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,["6",".",".","1","9","5",".",".","."]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,[".","9","8",".",".",".",".","6","."]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,["8",".",".",".","6",".",".",".","3"]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,["4",".",".","8",".","3",".",".","1"]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,["7",".",".",".","2",".",".",".","6"]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,[".","6",".",".",".",".","2","8","."]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,[".",".",".","4","1","9",".",".","5"]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:' ,[".",".",".",".","8",".",".","7","9"]]'})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:"Output: false"})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.strong,{children:"Explanation"}),": Same as Example 1, except with 5 in top-left corner changed to 8, resulting in the 3x3 box having two 8's."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsx)(n.h3,{id:"conceptual-idea",children:"Conceptual Idea"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Essentially, we need to find duplicates in any row, column or 3x3 sub-box."}),"\n",(0,s.jsx)(n.li,{children:"If a duplicate is found, then it is an invalid Sudoku"}),"\n",(0,s.jsx)(n.li,{children:"We can iterate over each row, column and 3x3 sub-box with a hashset, checking for duplicates"}),"\n",(0,s.jsx)(n.li,{children:"We can have 3 loops, one for the rows, one for the columns and one for the 3x3 sub-boxes."}),"\n",(0,s.jsxs)(n.li,{children:["For the rows:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Iterate over the vector, each value is a row -> iterate checking for duplicates"}),"\n",(0,s.jsx)(n.li,{children:"e.g:"}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"  for row in board.iter() { \n    set.clear()\n    for c in row.iter() { \n      // check for duplicates \n    } \n  }\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["For the cols:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For loop from 0 - 9, -> i","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Clear the hashset"}),"\n",(0,s.jsxs)(n.li,{children:["For loop from 0 - 9 -> j","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"board[j][i]"})," -> check for duplicates"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["For the sub-boxes:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For loop from 0 - 3 -> box_row","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For loop from 0 - 3 -> box_col","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Clear the hashset"}),"\n",(0,s.jsxs)(n.li,{children:["For loop from 0 - 3 -> row","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For loop from 0 - 3 -> col","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"board[box_row * 3 + row][box_col * 3 + col]"})," -> check for duplicates"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"We can use a single hashset to check for all the duplicates by clearing it on each iteration for row, col and sub-box"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsx)(n.h4,{id:"time",children:"Time"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Let's say the sudoku matrix length is ",(0,s.jsx)(n.code,{children:"n"}),", we do multiple consecutive nested loops -> O(n^2)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space",children:"Space"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The only extra space we create is the hashset which will have constant length -> O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.h3,{id:"rust",children:"Rust"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {\n  let mut set: HashSet<char> = HashSet::new();\n  \n  // Checking rows\n  for row in board.iter() {\n    set.clear();\n    for char in row.iter() {\n      if *char != '.' {\n        if set.contains(char) {\n          return false;\n        } else {\n          set.insert(*char);\n        } \n      }\n    }\n  }\n\n  // Checking cols\n  for i in 0..9 {\n    set.clear();\n    for j in 0..9 {\n      let char = board[j][i];\n      if char != '.' {\n        if set.contains(&char) {\n          return false;\n        } else {\n          set.insert(char);\n        }\n      }\n    }\n  }\n\n  // Checking sub-boxes\n  for box_row in 0..3 {\n    for box_col in 0..3 {\n      set.clear();\n      for row in 0..3 {\n        for col in 0..3 {\n          let char = board[box_row * 3 + row][box_col * 3 + col];\n          if char != '.' {\n            if set.contains(&char) {\n              return false;\n            } else {\n              set.insert(char);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>o,x:()=>c});var s=l(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);