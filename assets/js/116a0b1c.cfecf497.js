"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[320],{8939:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=t(4848),r=t(8453);const s={sidebar_position:6},l="Binary Search",a={id:"easy/binary_search",title:"Binary Search",description:"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.",source:"@site/docs/easy/binary_search.md",sourceDirName:"easy",slug:"/easy/binary_search",permalink:"/lcdocs/easy/binary_search",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"notesSidebar",previous:{title:"Valid Palindrome",permalink:"/lcdocs/easy/valid_palindrome"},next:{title:"Medium Problems",permalink:"/lcdocs/category/medium-problems"}},o={},d=[{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Notes",id:"notes",level:2},{value:"Conceptual Idea",id:"conceptual-idea",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Solution",id:"solution",level:2},{value:"Rust",id:"rust",level:3}];function h(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"binary-search",children:"Binary Search"}),"\n",(0,i.jsxs)(n.p,{children:["Given an array of integers ",(0,i.jsx)(n.code,{children:"nums"})," which is sorted in ascending order, and an integer ",(0,i.jsx)(n.code,{children:"target"}),", write a function to search ",(0,i.jsx)(n.code,{children:"target"})," in ",(0,i.jsx)(n.code,{children:"nums"}),". If ",(0,i.jsx)(n.code,{children:"target"})," exists, then return its index. Otherwise, return ",(0,i.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You must write an algorithm with ",(0,i.jsx)(n.code,{children:"O(log n)"})," runtime complexity."]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Input: ",(0,i.jsx)(n.code,{children:"nums = [-1,0,3,5,9,12], target = 9"}),(0,i.jsx)(n.br,{}),"\n","Output: ",(0,i.jsx)(n.code,{children:"4"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Input: ",(0,i.jsx)(n.code,{children:"nums = [-1,0,3,5,9,12], target = 2"}),(0,i.jsx)(n.br,{}),"\n","Output: ",(0,i.jsx)(n.code,{children:"-1"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(n.h3,{id:"conceptual-idea",children:"Conceptual Idea"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Since the array is sorted, we can use this to our advantage"}),"\n",(0,i.jsx)(n.li,{children:"Look at the middle number, if it is equal to the target -> return the index"}),"\n",(0,i.jsx)(n.li,{children:"If it is smaller than the target, we need to only look at the left half (do the same thing again with left half)"}),"\n",(0,i.jsx)(n.li,{children:"If it is greater than the target, we need to only look at the right half (do the same thing again with the left half)"}),"\n",(0,i.jsx)(n.li,{children:"If we divide too small, we return -1 (does not exist)"}),"\n",(0,i.jsxs)(n.li,{children:["Initialize two pointers, left and right","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Left is at the start of the array and right is at the end of the array"}),"\n",(0,i.jsx)(n.li,{children:"Iterate while left is smaller than or equal to right"}),"\n",(0,i.jsx)(n.li,{children:"Calculate the midpoint of left and right"}),"\n",(0,i.jsx)(n.li,{children:"If the midpoint is equal to the target -> return the index"}),"\n",(0,i.jsxs)(n.li,{children:["If the midpoint is less than the target","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Make the left pointer, 1 + midpoint"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["If the midpoint is greater than the target","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Make the right pointer, 1 - midpoint"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"complexity",children:"Complexity"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time: O(logn)"}),"\n",(0,i.jsx)(n.li,{children:"Space: O(1)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(n.h3,{id:"rust",children:"Rust"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"fn search(nums: Vec<i32>, target: i32) -> i32 {\n    let mut left = 0 as usize;\n    let mut right = nums.len() - 1;\n    while left < nums.len() && right < nums.len() && left <= right {\n      let mid = (left + right) / 2;\n      if nums[mid] == target {\n        return mid as i32;\n      } else if nums[mid] < target {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n    return -1;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE"}),": The additional checks in the while loop are due to the the Rust ",(0,i.jsx)(n.code,{children:"usize"})," type. When trying to subtract from 0 with a ",(0,i.jsx)(n.code,{children:"usize"})," type it wraps around to the largest value. E.g. 0 - 1 becomes a very large positive number instead of a negative number."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);