"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[719],{112:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=s(4848),t=s(8453);const i={sidebar_position:1},a="Group Anagrams",l={id:"medium/group_anagrams",title:"Group Anagrams",description:"Given an array of strings strs, group the anagrams together. You can return the answer in any order.",source:"@site/docs/medium/group_anagrams.md",sourceDirName:"medium",slug:"/medium/group_anagrams",permalink:"/lcdocs/medium/group_anagrams",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"notesSidebar",previous:{title:"Medium Problems",permalink:"/lcdocs/category/medium-problems"},next:{title:"Top K Frequent Elements",permalink:"/lcdocs/medium/top_k_frequent_elements"}},c={},o=[{value:"Constraints",id:"constraints",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Notes",id:"notes",level:2},{value:"Conceptual Idea",id:"conceptual-idea",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Time",id:"time",level:4},{value:"Space",id:"space",level:4},{value:"Solution",id:"solution",level:2},{value:"Rust",id:"rust",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"group-anagrams",children:"Group Anagrams"}),"\n",(0,r.jsxs)(n.p,{children:["Given an array of strings ",(0,r.jsx)(n.code,{children:"strs"}),", group the ",(0,r.jsx)(n.strong,{children:"anagrams"})," together. You can return the answer in any order."]}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.strong,{children:"Anagram"})," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."]}),"\n",(0,r.jsx)(n.h2,{id:"constraints",children:"Constraints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= strs.length <= 104"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= strs[i].length <= 100"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"strs[i]"})," consists of lowercase English letters."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'Input: strs = ["eat","tea","tan","ate","nat","bat"]'})," ",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.code,{children:'Output: [["bat"],["nat","tan"],["ate","eat","tea"]]'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'Input: strs = [""]'})," ",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.code,{children:'Output: [[""]]'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-3",children:"Example 3"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'Input: strs = ["a"]'})," ",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.code,{children:'Output: [["a"]]'})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsx)(n.h3,{id:"conceptual-idea",children:"Conceptual Idea"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use similar approach to ",(0,r.jsx)(n.a,{href:"/lcdocs/easy/valid_anagram",children:"Valid Anagram"})]}),"\n",(0,r.jsxs)(n.li,{children:["Count the frequency of each letter in each string","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The frequency array is used as a key in a hashmap that stores the array of other anagram"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Implementation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Initialize a hashmap with the key being a length 26 array of integers and the value being a vector of strings"}),"\n",(0,r.jsxs)(n.li,{children:["Iterate over the ",(0,r.jsx)(n.code,{children:"strs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["On each iteration, initialize a length 26 array of integers initialized to zero (",(0,r.jsx)(n.code,{children:"freq"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Iterate over each character in the current string, increment the corresponding index in the array (",(0,r.jsx)(n.code,{children:"a -> 0, b -> 1, etc."}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Check if the hashmap contains the ",(0,r.jsx)(n.code,{children:"freq"})," array as a key (same ",(0,r.jsx)(n.code,{children:"freq"})," means anagram)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If it does, push the current string to the corresponding string vector"}),"\n",(0,r.jsxs)(n.li,{children:["If it doesn't, add the ",(0,r.jsx)(n.code,{children:"freq"})," array with a vector containing the current string to the hashmap"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Iterate over all the keys in the hashmap and push the values to a result vector and return it"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"complexity",children:"Complexity"}),"\n",(0,r.jsx)(n.h4,{id:"time",children:"Time"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Let's say ",(0,r.jsx)(n.code,{children:"strs"})," is length ",(0,r.jsx)(n.code,{children:"n"})," and the longest ",(0,r.jsx)(n.code,{children:"strs[i]"})," has length ",(0,r.jsx)(n.code,{children:"m"})]}),"\n",(0,r.jsxs)(n.li,{children:["Iterate over the ",(0,r.jsx)(n.code,{children:"strs"})," array once -> O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:["Inside the ",(0,r.jsx)(n.code,{children:"strs"})," iterating, we iterate over each string once -> O(m)"]}),"\n",(0,r.jsx)(n.li,{children:"Results in O(n * m)"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"space",children:"Space"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In the worst case, we add ",(0,r.jsx)(n.code,{children:"n"})," entries to the hashmap -> O(n)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(n.h3,{id:"rust",children:"Rust"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n  let mut hash: HashMap<[i32; 26], Vec<String>> = HashMap::new();\n  for s in strs.iter() {\n    let mut freq: [i32; 26] = [0; 26];\n    for c in s.chars() {\n      let i = c as usize;\n      freq[i - 97] += 1;\n    }\n    let updated = match hash.get(&freq) {\n      Some(vec) => {\n        let mut vec = vec.clone();\n        vec.push(s.to_string());\n        vec\n      },\n      None => {\n        vec![s.to_string()]\n      }\n    };\n    hash.insert(freq, updated);\n  }\n  let mut result: Vec<Vec<String>> = vec![];\n  for (_, value) in hash.iter() {\n    result.push(value.clone());\n  }\n\n  return result;        \n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);