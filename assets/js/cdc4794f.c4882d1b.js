"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[173],{3199:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var s=t(4848),i=t(8453);const l={sidebar_position:1},a="Two Sum",r={id:"easy/two_sum",title:"Two Sum",description:"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",source:"@site/docs/easy/two_sum.md",sourceDirName:"easy",slug:"/easy/two_sum",permalink:"/lcdocs/easy/two_sum",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"notesSidebar",previous:{title:"Easy Problems",permalink:"/lcdocs/category/easy-problems"},next:{title:"Contains Duplicate",permalink:"/lcdocs/easy/contains_duplicate"}},c={},o=[{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Notes",id:"notes",level:2},{value:"Conceptual Idea",id:"conceptual-idea",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Time",id:"time",level:4},{value:"Space",id:"space",level:4},{value:"Solution",id:"solution",level:2},{value:"Rust",id:"rust",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"two-sum",children:"Two Sum"}),"\n",(0,s.jsxs)(n.p,{children:["Given an array of integers ",(0,s.jsx)(n.code,{children:"nums"})," and an integer ",(0,s.jsx)(n.code,{children:"target"}),", return ",(0,s.jsxs)(n.em,{children:["indices of the two numbers such that they add up to ",(0,s.jsx)(n.code,{children:"target"})]}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You may assume that each input would have ",(0,s.jsx)(n.strong,{children:"exactly one solution"}),", and you may not use the same element twice."]}),"\n",(0,s.jsx)(n.p,{children:"You can return the answer in any order."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Input: nums = [2,7,11,15], target = 9"})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:"Output: [0,1]"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Input: nums = [3,2,4], target = 6"})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:"Output: [1,2]"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-3",children:"Example 3"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Input: nums = [3,3], target = 6"})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:"Output: [0,1]"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsx)(n.h3,{id:"conceptual-idea",children:"Conceptual Idea"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create a hashmap with the number as the key and the index as the value"}),"\n",(0,s.jsxs)(n.li,{children:["Iterate over the numbers","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Calculate the number we are looking for at each iteration to make the target (",(0,s.jsx)(n.code,{children:"t = target - curr"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Check if the hashmap contains that value","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If it does, check if the index it's at is not the same as the current index (otherwise we'd be using the same element twice)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Return the current index and the index of the found value"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"If it doesn't, add the current value to the hashmap"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsx)(n.h4,{id:"time",children:"Time"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We iterate over the numbers once -> O(n)"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space",children:"Space"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We only create the hashmap for extra space","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"At the worst case, we add all values to the hashmap -> O(n)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.h3,{id:"rust",children:"Rust"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n  let mut hash: HashMap<i32, usize> = HashMap::new();\n  for (i, n) in nums.iter().enumerate() {\n    let t = target - n;\n    match hash.get(&t) {\n      Some(val) => {\n        if *val != i {\n          return vec![*val as i32, i as i32]\n        }\n      }, \n      None => {\n        hash.insert(*n, i);\n      }\n    }\n  }\n  return vec![0, 0]\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);