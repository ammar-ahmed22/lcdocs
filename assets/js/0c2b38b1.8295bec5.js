"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[442],{8776:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>o,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var t=s(4848),i=s(8453);const l={sidebar_position:4},a="Valid Parentheses",c={id:"easy/valid_parentheses",title:"Valid Parentheses",description:"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",source:"@site/docs/easy/valid_parentheses.md",sourceDirName:"easy",slug:"/easy/valid_parentheses",permalink:"/lcdocs/easy/valid_parentheses",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"notesSidebar",previous:{title:"Valid Anagram",permalink:"/lcdocs/easy/valid_anagram"},next:{title:"Valid Palindrome",permalink:"/lcdocs/easy/valid_palindrome"}},r={},h=[{value:"Constraints",id:"constraints",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Notes",id:"notes",level:2},{value:"Conceptual Idea",id:"conceptual-idea",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Time",id:"time",level:4},{value:"Space",id:"space",level:4},{value:"Solution",id:"solution",level:2},{value:"Rust",id:"rust",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"valid-parentheses",children:"Valid Parentheses"}),"\n",(0,t.jsxs)(n.p,{children:["Given a string ",(0,t.jsx)(n.code,{children:"s"})," containing just the characters ",(0,t.jsx)(n.code,{children:"'('"}),", ",(0,t.jsx)(n.code,{children:"')'"}),", ",(0,t.jsx)(n.code,{children:"'{'"}),", ",(0,t.jsx)(n.code,{children:"'}'"}),", ",(0,t.jsx)(n.code,{children:"'['"})," and ",(0,t.jsx)(n.code,{children:"']'"}),", determine if the input string is valid."]}),"\n",(0,t.jsx)(n.p,{children:"An input string is valid if:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open brackets must be closed by the same type of brackets."}),"\n",(0,t.jsx)(n.li,{children:"Open brackets must be closed in the correct order."}),"\n",(0,t.jsx)(n.li,{children:"Every close bracket has a corresponding open bracket of the same type."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"constraints",children:"Constraints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= s.length <= 104"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"s"})," consists of parentheses only ",(0,t.jsx)(n.code,{children:"'()[]{}'"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:'Input: s = "()"'})," ",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"Output: true"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:'Input: s = "()[]{}"'})," ",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"Output: true"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-3",children:"Example 3"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:'Input: s = "(]"'})," ",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"Output: false"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsx)(n.h3,{id:"conceptual-idea",children:"Conceptual Idea"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can use a stack to track the closing braces"}),"\n",(0,t.jsx)(n.li,{children:"Create a hashmap that stores the opening brace as the key and the closing brace as the value"}),"\n",(0,t.jsx)(n.li,{children:"Create an empty stack"}),"\n",(0,t.jsxs)(n.li,{children:["Iterate over the characters in ",(0,t.jsx)(n.code,{children:"s"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If the character is an opening brace (it can be found in the hashmap with a key lookup)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Push the closing brace to the stack (the value in the hashmap)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["If the character is a closing brace (not found in the hashmap with key lookup)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Pop the last value in the stack","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check if the popped value is the same as the current character","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If they are different, it is the wrong closing brace because the last brace needs to close before any others -> return false"}),"\n",(0,t.jsx)(n.li,{children:"If they are the same, continue"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["If we get to the end of the characters, return true if the stack is empty, otherwise false","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If the stack has values, that means there are unclosed braces at the end of the string"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"complexity",children:"Complexity"}),"\n",(0,t.jsx)(n.h4,{id:"time",children:"Time"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"As we only iterate over the string once, O(n)"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"space",children:"Space"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The hashmap only has 3 entries -> O(3)"}),"\n",(0,t.jsxs)(n.li,{children:["The stack can have up to ",(0,t.jsx)(n.code,{children:"n"})," entries -> O(n)"]}),"\n",(0,t.jsx)(n.li,{children:"Results in O(n)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,t.jsx)(n.h3,{id:"rust",children:"Rust"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"fn main() {\n  let mut map: HashMap<char, char> = HashMap::new();\n  map.insert('{', '}');\n  map.insert('(', ')');\n  map.insert('[', ']');\n\n  let mut stack: Vec<char> = vec![];\n\n  for c in s.chars() {\n    match map.get(&c) {\n      Some(closing) => {\n        // opening paren found\n        // push closing to stack\n        stack.push(*closing);\n      },\n      None => {\n        // closing paren found\n        // pop from the stack -> check if they are the same\n        match stack.pop() {\n          Some(top) => {\n            if top != c {\n              return false;\n            }\n          },\n          None => {\n            return false;\n          }\n        }\n      }\n    }\n  }\n  return stack.len() == 0\n}\n"})})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(6540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);