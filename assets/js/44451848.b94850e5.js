"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[957],{6493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>o});var i=n(4848),s=n(8453);const r={sidebar_position:11},l="Car Fleet",a={id:"medium/car_fleet",title:"Car Fleet",description:"There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.",source:"@site/docs/medium/car_fleet.md",sourceDirName:"medium",slug:"/medium/car_fleet",permalink:"/lcdocs/medium/car_fleet",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"notesSidebar",previous:{title:"Daily Temperatures",permalink:"/lcdocs/medium/daily_temperatures"},next:{title:"Search 2D Matrix",permalink:"/lcdocs/medium/search_2d_matrix"}},c={},o=[{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Notes",id:"notes",level:2},{value:"Conceptual Idea",id:"conceptual-idea",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Time",id:"time",level:4},{value:"Space",id:"space",level:4},{value:"Solution",id:"solution",level:2},{value:"Rust",id:"rust",level:3}];function d(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"car-fleet",children:"Car Fleet"}),"\n",(0,i.jsxs)(t.p,{children:["There are ",(0,i.jsx)(t.code,{children:"n"})," cars at given miles away from the starting mile 0, traveling to reach the mile ",(0,i.jsx)(t.code,{children:"target"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["You are given two integer array ",(0,i.jsx)(t.code,{children:"position"})," and ",(0,i.jsx)(t.code,{children:"speed"}),", both of length ",(0,i.jsx)(t.code,{children:"n"}),", where ",(0,i.jsx)(t.code,{children:"position[i]"})," is the starting mile of the ",(0,i.jsx)(t.code,{children:"ith"})," car and ",(0,i.jsx)(t.code,{children:"speed[i]"})," is the speed of the ",(0,i.jsx)(t.code,{children:"ith"})," car in miles per hour."]}),"\n",(0,i.jsx)(t.p,{children:"A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car."}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.strong,{children:"car fleet"})," is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet."]}),"\n",(0,i.jsxs)(t.p,{children:["If a car catches up to a car fleet at the mile ",(0,i.jsx)(t.code,{children:"target"}),", it will still be considered as part of the car fleet."]}),"\n",(0,i.jsx)(t.p,{children:"Return the number of car fleets that will arrive at the destination."}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.h3,{id:"example-1",children:"Example 1"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Input: ",(0,i.jsx)(t.code,{children:"target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]"}),"\nOutput: ",(0,i.jsx)(t.code,{children:"3"})]}),"\n",(0,i.jsx)(t.p,{children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target."}),"\n",(0,i.jsx)(t.li,{children:"The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself."}),"\n",(0,i.jsx)(t.li,{children:"The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"example-2",children:"Example 2"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Input: ",(0,i.jsx)(t.code,{children:"target = 10, position = [3], speed = [3]"}),"\nOutput: ",(0,i.jsx)(t.code,{children:"1"})]}),"\n",(0,i.jsx)(t.p,{children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"There is only one car, hence there is only one fleet."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"example-3",children:"Example 3"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Input: ",(0,i.jsx)(t.code,{children:"target = 100, position = [0, 2, 4], speed = [4, 2, 1]"}),"\nOutput: ",(0,i.jsx)(t.code,{children:"1"})]}),"\n",(0,i.jsx)(t.p,{children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5."}),"\n",(0,i.jsxs)(t.li,{children:["Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches ",(0,i.jsx)(t.code,{children:"target"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(t.h3,{id:"conceptual-idea",children:"Conceptual Idea"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["To start off, we'll sort the input arrays by position in DESCENDING order into a tuple array","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"This is because the cars closer to the target need to be handled first"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"Create a stack"}),"\n",(0,i.jsxs)(t.li,{children:["Iterate over the sorted, descending array and calculate the time to target (",(0,i.jsx)(t.code,{children:"(target - pos) / speed"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["If the stack is empty OR if the current time is greater than the top of the stack, push to the stack","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If the current time is greater than the last time added to the stack, this is a new fleet (slow car has big time)"}),"\n",(0,i.jsx)(t.li,{children:"The first car will always create a fleet"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"Return the length of the stack at the end"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"complexity",children:"Complexity"}),"\n",(0,i.jsx)(t.h4,{id:"time",children:"Time"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Sorting the arrays -> O(nlogn)"}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"space",children:"Space"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Creating a new sorted, coupled array -> O(n)"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(t.h3,{id:"rust",children:"Rust"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"fn car_fleet(target: i32, position: Vec<i32>, speed: Vec<i32>) -> i32 {\n  let mut coupled: Vec<(i32, i32)> = Vec::new();\n  for i in 0..position.len() {\n    coupled.push((position[i], speed[i]));\n  }\n  coupled.sort_by(|a, b| b.0.cmp(&a.0));\n  let mut stack: Vec<f64> = Vec::new();\n  for (pos, speed) in coupled.iter() {\n    let time_to_target: f64 = (target - pos) as f64 / *speed as f64;\n    if stack.is_empty() || time_to_target > stack[stack.len() - 1] {\n      stack.push(time_to_target);\n    }\n  }\n  return stack.len() as i32; \n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(6540);const s={},r=i.createContext(s);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);