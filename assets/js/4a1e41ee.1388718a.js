"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[267],{7402:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var s=t(4848),i=t(8453);const l={sidebar_position:2},a="Contains Duplicate",r={id:"easy/contains_duplicate",title:"Contains Duplicate",description:"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",source:"@site/docs/easy/contains_duplicate.md",sourceDirName:"easy",slug:"/easy/contains_duplicate",permalink:"/lcdocs/easy/contains_duplicate",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"notesSidebar",previous:{title:"Two Sum",permalink:"/lcdocs/easy/two_sum"},next:{title:"Valid Anagram",permalink:"/lcdocs/easy/valid_anagram"}},c={},o=[{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Notes",id:"notes",level:2},{value:"Conceptual Idea",id:"conceptual-idea",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Time",id:"time",level:4},{value:"Space",id:"space",level:4},{value:"Solution",id:"solution",level:2},{value:"Rust",id:"rust",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"contains-duplicate",children:"Contains Duplicate"}),"\n",(0,s.jsxs)(n.p,{children:["Given an integer array ",(0,s.jsx)(n.code,{children:"nums"}),", return ",(0,s.jsx)(n.code,{children:"true"})," if any value appears ",(0,s.jsx)(n.strong,{children:"at least twice"})," in the array, and return ",(0,s.jsx)(n.code,{children:"false"})," if every element is distinct."]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Input: nums = [1,2,3,1]"})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:"Output: true"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Input: nums = [1,2,3,4]"})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:"Output: false"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-3",children:"Example 3"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Input: nums = [1,1,1,3,3,4,3,2,4,2]"})," ",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.code,{children:"Output: true"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsx)(n.h3,{id:"conceptual-idea",children:"Conceptual Idea"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create a hashmap with the integer as the key and bool as the value"}),"\n",(0,s.jsxs)(n.li,{children:["Iterate over the numbers","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Check if the current value is in the hashmap","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If it is, return true"}),"\n",(0,s.jsx)(n.li,{children:"If it's not, add the value to hashmap"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Get to the end, return false"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsx)(n.h4,{id:"time",children:"Time"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Iterate over values once, O(n)"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space",children:"Space"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create a hashmap for every entry at the worst case, O(n)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.h3,{id:"rust",children:"Rust"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"fn contains_duplicate(nums: Vec<i32>) -> bool {\n  let mut hash: HashMap<i32, bool> = HashMap::new();\n  for num in nums.iter() {\n    match hash.get(num) {\n      Some(_) => {\n        return true;\n      },\n      None => {\n        hash.insert(*num, true);\n      }\n    }\n  }\n  return false;        \n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);